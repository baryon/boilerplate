import "util.scrypt";

/**
 * A token protocol based on UTXO model
 */
contract Token {
    public function split(Sig senderSig, PubKey receiver0, int tokenAmount0, int satoshiAmount0, 
                            PubKey receiver1, int tokenAmount1, int satoshiAmount1, bytes txPreimage) {
        require(tokenAmount0 > 0);
        // 1 to 1 transfer when tokenAmount1 is 0
        require(tokenAmount1 >= 0);

        // this ensures the preimage is for the current tx
		require(Tx.checkPreimage(txPreimage));

        // read previous locking script
        // locking script = codePart + OP_RETURN + senderPublicKey + balance0 + balance1
        bytes lockingScript = Util.scriptCode(txPreimage);
        int scriptLen = length(lockingScript);

        int amountStart = scriptLen - Util.DataLen * 2;

        PubKey sender = PubKey(lockingScript[amountStart - Util.PubKeyLen : amountStart]);
        // authorize
        require(checkSig(senderSig, sender));
        
        int balance0 = unpack(lockingScript[amountStart : amountStart + Util.DataLen]);
        int balance1 = unpack(lockingScript[amountStart + Util.DataLen :]);

        // split
        require(balance0 + balance1 == tokenAmount0 + tokenAmount1);
        
        // persist contract code part, including op_return itself
        bytes codePart = lockingScript[: amountStart - Util.PubKeyLen];
        
        // setting first balance as 0 is just a convention, not a requirement
        bytes outputScript0 = codePart + receiver0 + num2bin(0, Util.DataLen) + num2bin(tokenAmount0, Util.DataLen);
        bytes output0 = num2bin(satoshiAmount0, Util.OutputValueLen) + Util.writeVarint(outputScript0);
        bytes output1 = b'';
        if (tokenAmount1 > 0) {
            bytes outputScript1 = codePart + receiver1 + num2bin(0, Util.DataLen) + num2bin(tokenAmount1, Util.DataLen);
            output1 = num2bin(satoshiAmount1, Util.OutputValueLen) + Util.writeVarint(outputScript1);
        }
		Sha256 hashOutputs = hash256(output0 + output1);
        
        require(hashOutputs == Util.hashOutputs(txPreimage));
    }

    public function merge(Sig senderSig, PubKey receiver, bool isFirstInput, int otherTokenAmount, int satoshiAmount, bytes txPreimage) {
        require(otherTokenAmount >= 0);

        // this ensures the preimage is for the current tx
		require(Tx.checkPreimage(txPreimage));

        // read previous locking script
        bytes lockingScript = Util.scriptCode(txPreimage);
        int scriptLen = length(lockingScript);

        int amountStart = scriptLen - Util.DataLen * 2;

        PubKey sender = PubKey(lockingScript[amountStart - Util.PubKeyLen : amountStart]);
        // authorize
        require(checkSig(senderSig, sender));

        int balance0 = unpack(lockingScript[amountStart : amountStart + Util.DataLen]);
        int balance1 = unpack(lockingScript[amountStart + Util.DataLen :]);

        // persist contract code part, including op_return itself
        bytes codePart = lockingScript[: amountStart - Util.PubKeyLen];
        
        bytes amountPart = b'';
        if (isFirstInput) {
            amountPart = num2bin(balance0 + balance1, Util.DataLen) + num2bin(otherTokenAmount, Util.DataLen);
        } else {
            amountPart = num2bin(otherTokenAmount, Util.DataLen) + num2bin(balance0 + balance1, Util.DataLen);
        }
        // merge
        bytes outputScript = codePart + receiver + amountPart;
        bytes output = num2bin(satoshiAmount, Util.OutputValueLen) + Util.writeVarint(outputScript);
        require(hash256(output) == Util.hashOutputs(txPreimage));
    }
}