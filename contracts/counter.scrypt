import "util.scrypt";

contract Counter {
  //Tx.checkPreimage是一个Tx合约中的静态函数，它检查原像是否同当前交易一致
  //调用increment函数时，原像中包括了前一个交易锁定脚本，锁定脚本的最后含有一个opreturn 00
  //这个函数使用了OP_CHECKSIG，进行签名检查
  //签名检查用了随机生成的公钥私钥
  public function increment(SigHashPreimage txPreimage, int amount) {
    require(Tx.checkPreimage(txPreimage));

    //从原像中获取脚本代码部分
    bytes scriptCode = Util.scriptCode(txPreimage);
    int scriptLen = len(scriptCode);

    // state (i.e., counter value) is at the end
    //最后一个字节是数据
    //从字节转换为int数字
    int counter = unpack(scriptCode[scriptLen - Util.DataLen : ]);
    // increment counter
    //把脚本代码的最后一个字节改为counter+1
    bytes scriptCode_ = scriptCode[ : scriptLen - Util.DataLen] + num2bin(counter + 1,
      Util.DataLen);
    // output: amount + scriptlen + script
    //获取新的output，这个output是一个sha256(sha256(b))，真对的是输出，包括输出的satoshi和输出的脚本
    //OutputValueLen等于8，就是新输出satoshi的数量站8个字节， UInt64LE类型
    //这里全部假设输入和输出都只有一个
    bytes output = Util.buildOutput(scriptCode_, amount);
    // ensure output is expected: amount is same with specified
    // also output script is the same with scriptCode except counter incremented
    //判断新的hashOutputs是否同原像中的hashOutputs一致，就可以确认新的输出符合原锁定脚本的规定
    require(hash256(output) == Util.hashOutputs(txPreimage));
  }
}